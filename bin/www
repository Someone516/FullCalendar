#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('app');
var http = require('http');
var io = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = 8080;
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/************Socket.io connection************/

var socketIO = io.listen(server);
socketIO.on('connection', function(socket){
  //on deleting an event
  socket.on('event_deleted', function(data){
    socketIO.emit('event_deleted', data);
  });

  //on adding a new event
  socket.on('event_added', function(data){
    socketIO.emit('event_added', data);
  });

  //on modifying an event
  socket.on('event_modified', function(data){
    socketIO.emit('event_modified', data);
  });  

});


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error('Port ' + port + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error('Port ' + port + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  debug('Listening on port ' + server.address().port);
}